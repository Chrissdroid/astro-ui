---
import  filteredPaths from '../scripts/build/filteredPaths';
import  withMetaData from '../scripts/build/withMetaData';
import * as fs from 'node:fs/promises';
import {spawn} from 'node:child_process';
import SearchBox from '../components/Stork/StorkOutput.astro'


const list = []
for(let route of await withMetaData(filteredPaths('all'))){
    const {props:{
        slug,directory,path,
        data:{title,astro:{html}
    }}}=route
    list.push({
        url:`${directory}/${slug}/index.html`,
        title:`${directory} ${slug.split('/').join(' ')}`,
        src_url:`docs/${directory}/${slug}/index.html`
        })
}
let reducing = list.reduce((result,current)=>{
        let entries = Object.entries(current)
        let mod = entries.reduce((acc,item,index)=>{
            let [key,value] = item
            acc += `${key} = '${value}'\n`
            return acc

        },"")
        result += `[[input.files]]\n${mod}\n`
        return result
    },'')

let literal = `
[input]
base_directory = "/docs/"
exclude_html_selector = "pre.language"
minimum_indexed_substring_length = 2
frontmatter_handling = "Omit"
stemming = "English"
title_boost = "Ridiculous"

${reducing}

[output]
excerpt_buffer = 5
save_nearest_html_id = true
`
async function createDir(path){
    try{
        return await fs.mkdir(path, {recursive: true});
    } catch (error){
        console.log("Cannot create directory for Stork: ", error);
    }
}
async function writeToml(data){
    try {
        return await fs.writeFile(`public/res/stork/stork.toml`,data,{encoding:'utf8'})
    } catch (error) {
        console.error("Error Writing the Toml File:",error);
    }
}
await createDir('public/res/stork');
await writeToml(literal)


/*exec('echo "Executing curl download" && curl -O https://files.stork-search.net/releases/v1.4.0/stork-amazon-linux && echo "Listing files and directories" && ls && echo "Adding run permissions to stork" && chmod +x stork-amazon-linux && echo "Running stork build" && ./stork-amazon-linux build --input public/stork/stork.toml --output public/stork/xelement.st', (err, stdout, stderr) => {
    if (err) {
        console.log('Error executing stork command via NodeJS, Error message: ' + err.message);
        return;
    }
    console.log("Exec command completed");
    // the *entire* stdout and stderr (buffered)
    console.log(`stdout: ${stdout}`);
    console.log(`stderr: ${stderr}`);
})*/

---
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>
    <body>
        <SearchBox />
    </body>
    </html>