---
import DocsLayout from '../../layouts/DocsLayout.astro'

export async function getStaticPaths() {
    const docdir = '../../../../../docs/XElement/'
    const paths = Object.keys(
        import.meta.glob('../../../../../docs/XElement/**/*.md')
    ).map(
         (slug) => {
          return ({
            params: {
                slug: slug.slice(docdir.length, -3).toLowerCase(),
            },
            props: {
                slug: slug.slice(docdir.length, -3).toLowerCase(),
                path: new URL(slug, import.meta.url).pathname,
            },
        })}
    ).filter(x=>!(x.props.slug.includes('sarahedits'))).filter(x=>!(x.props.slug.includes('readme')))
   
    const hash = Object.create(null)
    
    /** Attaches a nested menu to an array of static paths. */
    const withNestedMenu = async (paths) => {
      const root = { name: 'root' }

      const fetchData = async(path)=>{
        return await import(path).then(exports=>exports.frontmatter)
      }
      for (const path of paths) {
        const segments = path.props.slug.split('/')
        const filtered = segments.filter(x=> x!=='').filter(x=> !(x.includes('readme')))
        let item = root
        
        for (const [index, name] of Object.entries(filtered)) {
          if(!item.items){
            item.items = []
          }
          let isItem = index === String(filtered.length - 1)
          if (isItem) {
            item.items.push({ name, href: `/docs/${path.props.slug.toLowerCase()}` })
          } else {
            item.items = item.items || []

            item = (
              hash[name] = (
                hash[name] ||
                item.items[item.items.push({ name, items: [] }) - 1]
              )
            )
          }
        }
      }

      for (const path of paths) {
        // postFileIndexToToml({
        //   path:path.props.path,
        //   url:`${path.props.slug}`,
        //   title:path.props.slug.split('/').join(' ')
        // })
        path.props.menu = root.items
        path.props.data = await fetchData(path.props.path)
      }
      return paths
    }

    return withNestedMenu(paths)
}


---
<DocsLayout content={Astro.props}/>
<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html> -->