---
    import {Markdown} from 'astro/components'
    import Stylesheet from 'astro-stylesheet'
    import Sidebar from '../components/sidebar/Sidebar.astro'
    import ThemeToggle from '../components/Header/ThemeToggle.astro'
    import Header from '../components/Header/Header.astro'
    import TableOfContents from '../components/TableOfContents.astro'
    import XElement from 'astro-xelement'
    const {article:Article} = XElement
    const {contents,props}= Astro.props
    const content = contents.contents 
    const {astro} = content
    const {headers,source} = astro
 
---
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
		<!-- <link rel="stylesheet" href={Astro.resolve('../styles/tailwind.scss')}> -->
        <!-- <Stylesheet list={[
            {
                href:"/src/styles/tailwind.scss",
                media:"screen"
            },
            {
                href:"/src/styles/DocumentStyles.scss",
                media:"screen"
            },
            {
                href:"/src/styles/Stork.scss",
                media:"screen"
            },
        ]}/> -->
        <title>{content.title}</title>
    </head>
    <body class="">
        <Header class="navbar navbar__header"/>
        <div class="break__row"></div>
        <main class="layout">
            <aside class=".grid-left .grid-sidebar">
                <Sidebar menu={props.menu}/>
            </aside>
            <Article class="documentation prose js-documentation .grid-main"
                @do={(element)=>{
                    const headings = [...element.querySelectorAll('h1, h2, h3, h4, h5, h6')]
                    function link(heading){
                        return `<a aria-hidden="true" tabindex="-1" href="#${heading.id}"><span class="sr-only">This is the heading anchor for the following "${heading.textContent}" content</span><span class="heading__icon heading__icon__link">#</span></a>`
                    }
                    headings.forEach(heading=>{
                        heading.insertAdjacentHTML('afterBegin',link(heading))
                    })
               
                }}
            >
                <Markdown content={source}/>
            </Article>
            <aside class="rightbar .grid-right">
                <div class="">
                    <h1>
                        Something
                    </h1>
                </div>
                <TableOfContents {headers}/>
            </aside>
        </main>
        <footer class="footer__wrapper"></footer>
    </body>
    </html>
    <style lang="scss">
			body {
				width: 100%;
				display: grid;
				grid-template-rows: var(--theme-navbar-height) 1fr;
				--gutter: 0.5rem;
				--doc-padding: 2rem;
			}
			.layout {
				display: grid;
				grid-auto-flow: column;
				grid-template-columns:
					minmax(var(--gutter), 1fr)
					minmax(0, var(--max-width))
					minmax(var(--gutter), 1fr);
				overflow-x: hidden;
			}
			.layout :global(> *) {
				width: 100%;
				height: 100%;
			}
			.grid-sidebar {
				height: 100vh;
				position: sticky;
				top: 0;
				padding: 0;
			}
			.grid-left {
				position: fixed;
				background-color: var(--theme-bg);
				z-index: 10;
				display: none;
			}
			.grid-main {
				padding: var(--doc-padding) var(--gutter);
				grid-column: 2;
				display: flex;
				flex-direction: column;
				height: 100%;
			}
			.grid-right {
				display: none;
			}
			:global(.mobile-sidebar-toggle) {
				overflow: hidden;
			}
			:global(.mobile-sidebar-toggle #grid-left) {
				display: block;
				top: 2rem;
			}
			@media (min-width: 50em) {
				.layout {
					overflow: initial;
					grid-template-columns:
						20rem
						minmax(0, var(--max-width));
					gap: 1em;
				}
				#grid-left {
					display: flex;
					padding-left: 2rem;
					position: sticky;
					grid-column: 1;
				}
			}

			@media (min-width: 72em) {
				.layout {
					grid-template-columns:
						20rem
						minmax(0, var(--max-width))
						18rem;
					padding-left: 0;
					padding-right: 0;
					margin: 0 auto;
				}
				#grid-right {
					grid-column: 3;
					display: flex;
				}
			}
    </style>