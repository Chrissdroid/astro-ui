---
import {SanitizerProps,OpenProps} from './types'
import SanitizerLink from './Sanitzer.astro'
import OpenPropsLink from './OpenProps.astro'
/**
 *  @function handleError
 *  @params err? - defaults to "No Stylesheets have been included"
 *  @throw Error to STDERR
 */
function handelError(err){
    throw new ReferenceError(`‚ùó There is an Error with the <Stylesheet> component: \n${err}`)
}

/** Render Link Element */
const renderLinkElement = ( path:string, media?:string, cors?:string, preload?:string, alternative?:boolean, title?:string ):string =>
`<link ${preload ?`rel="preload stylesheet" as="style" ` : `rel=${alternative ? `"alternative stylesheet"` : `"stylesheet"`}`} type="text/css" href="${path}" ${media ? `media="${media}"`: ''} ${cors ? `crossorigin="${cors}"` : ''} ${title && alternative ? `title="${title}"`:''} />`

interface StylesheetProps {
    /** HREF location of the file */
    href?: "npm:" | string ,
    /** Media type for the stylesheet */
    media?: string,
    /** Preload the stylesheet */
    preload?,
    /** Alternative Stylesheet */
    alternative?,
    /** Alternative Stylesheet NAME */
    title?:string,
    /** CORS settings */
    cors?:'anonymous'|'use-credentials',
}
interface Props extends StylesheetProps {
    list?: StylesheetProps[]
    sanitize?: SanitizerProps 
    openProps?: OpenProps 
}

// Acquiring values from props
const {
       list,
       sanitize="none",
       openProps = "none",
       href: hrefValue,
       media: mediaValue,
       cors,
       preload,
       alternative,
       title
       } = Astro.props as Props
const attributesList = list || []

if(!hrefValue && (!Array.isArray(list) || list.length === 0)){
    handelError('No Stylesheets have been included!')
}

if (hrefValue) {
    attributesList.push({
        href: hrefValue,
        media: mediaValue,
        cors,
        preload,
        alternative,
        title
        })
}

const linkCSS = attributesList.map(
    (attribute) =>{
        const {
            href,
            media,
            cors,
            preload,
            alternative,
            title
            } = attribute
        let src = href.startsWith('npm:') && href.endsWith('.css')
                    ? 'https://cdn.skypack.dev/' + href.slice(4)
                    : href
         return ({href:src,media,cors,preload,alternative,title})
    }
)


---
    <!-- Managed Stylesheets -->
    {
        linkCSS.map(({href,media,cors,preload,alternative,title})=>(
            <link 
                href={href} 
                {media ?? `media="${media}"`} 
                {preload 
                    ?`rel="preload" as="style" ` 
                    : `rel=${alternative 
                            ? `"alternative stylesheet"` 
                            : `"stylesheet"`}
                `} 
                {title && alternative ? `title="${title}"`:''} 
                {cors ?? `crossorigin` } 
                type="text/css" 
                />

        ))
    }
    {
        sanitize &&
         <SanitizerLink sanitize={sanitize} />
    }
    {
        openProps &&
         <OpenPropsLink props={OpenProps} />
    }
    <!-- End of Stylesheets -->