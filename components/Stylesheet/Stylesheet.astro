---
/**
 *  @function handleError
 *  @params err? - defaults to "No Stylesheets have been included"
 *  @throw Error to STDERR 
 */
function handelError(err='No Stylesheets have been included!'){
    throw new Error(err)
}
/**
 *  @params path - used as source for the href  
 *  @returns HTMLLinkElement,  
 * 
 **/
const returnLink = (path:string,media?:string,cors?:string,preload?:string,alternative?:boolean,title?:string):HTMLLinkElement => 
`<link ${preload ?`rel="preload" as="style" ` : `rel=${alternative ? `"alternative stylesheet"` : `"stylesheet"`}`} type="text/css" href="${path}" ${media ? `media="${media}"`: ''} ${cors ? `crossorigin="${cors}"` : ''} ${title && alternative ? `title="${title}"`:''} />`

type SanitizeList =
        "all" |
        "bare"|
        "forms"|
        "assets"|
        "typography"|
        "reducedMotion"|
        "sysUI"|
        "monoUI"
    
type PropsAttributes = {
    href?: "npm:" | string ,
    media?: string,
    preload?,
    alternative?,
    cors?:'anonymous'|'use-credentials',
    title?:string,
}

interface Props extends PropsAttributes {
    list?: PropsAttributes[]
    sanitize?: SanitizeList
}

const sanitizerURLS = {
    default:"https://cdn.skypack.dev/sanitize.css",
    forms:"https://unpkg.com/sanitize.css/forms.css",
    assets:"https://unpkg.com/sanitize.css/assets.css",
    typography:"https://unpkg.com/sanitize.css/typography.css",
    reducedMotion:"https://unpkg.com/sanitize.css/reduce-motion.css",
    sysUI:"https://unpkg.com/sanitize.css/system-ui.css",
    monoUI:"https://unpkg.com/sanitize.css/ui-monospace.css"
}

// Acquiring values from props
const {list, sanitize, href: hrefValue, media: mediaValue, cors, preload, alternative, title} = Astro.props as Props
const attributesList = list || []

if(!hrefValue && (!Array.isArray(list) || list.length === 0)){
    handelError()
}

if (hrefValue) {
    attributesList.push({
        href: hrefValue, 
        media: mediaValue,
        cors,
        preload,
        alternative,
        title
        })
}

const linkCSS = attributesList.map(
    (attribute) =>{
        const {
            href,
            media,
            cors,
            preload,
            alternative,
            title} = attribute
        let src = href.startsWith('npm:') && href.endsWith('.css')
                    ? 'https://cdn.skypack.dev/' + href.slice(4) 
                    : href
         return returnLink(src,media,cors,preload,alternative,title)
    }
)

/**Global to place the sanitized links into */
let sanitizedArray = []

/**
 * Assister function to help push the right sanitized links to the array
 */
const getSanitizeLinks = async (name) =>{
    let cors="anonymous"
    if(name ==='all'){
       Object.entries(sanitizerURLS).forEach(link=>{
        sanitizedArray.push(
            returnLink(link[1],null,cors)
        )
    })
    }
    else if(name === 'bare'){
        sanitizedArray.push(
            returnLink(sanitizerURLS['default'],null,cors)
        )
    }
    else{
        sanitizedArray.push(
            returnLink(sanitizerURLS['default'],null,cors)
        )
        sanitizedArray.push(
            returnLink(sanitizerURLS[`${name}`],null,cors)
        )
    }
}

/**
 * Normalise the sanitize behaviour
 */
const linkSanitizeHTML = (
    sanitize === 'all' 
        ? getSanitizeLinks('all')
    : sanitize === 'bare' 
        ? getSanitizeLinks('bare')
    : sanitize === 'forms' 
        ? getSanitizeLinks('forms')
    : sanitize === 'assets' 
        ? getSanitizeLinks('assets')
    : sanitize === 'typography' 
        ? getSanitizeLinks('typography')
    : sanitize === 'reducedMotion' 
        ? getSanitizeLinks('reducedMotion')
    : sanitize === 'sysUI' 
        ? getSanitizeLinks('sysUI')
    : sanitize === 'monoUI' 
        ? getSanitizeLinks('monoUI')
    : handelError('An incorrect sanitizer value has been provided as Props')

)

/**
 * Function to populate the list of sanitized links 
 */
const populateSanitizer = async() =>{
    const worker = await linkSanitizeHTML
    return sanitizedArray
}

---
    <!-- Stylesheets -->
    {linkCSS}
    {await populateSanitizer()}