---
function handelError(err){
    throw new ReferenceError(`‚ùó There is an Error with the <Stylesheet> component: \n${err}`)
}
interface list{
  href?:string,
  media?:string,
  preload?:boolean,
  title?:string,
  alternative?:boolean,
  cors?:boolean | 'anonymous' | 'use-credentials'
}
interface Props extends list{
  href?:string,
  local?:string,
  media?:string,
  list?:list[],
}

const {href,media,list, preload, title, alternative, cors} = Astro.props as Props
console.log(Astro.props)

let styleList = []

const formatHref = (url:string) => {
  const checkIfRelative = url.includes('src/') || url.includes('../')
  const isNPM = url.startsWith('npm:') && url.endsWith('.css')
  const isUnpkg = url.startsWith('unpkg:') && url.endsWith('.css')
  if(checkIfRelative){
    return handelError('Sorry this component does not support relative files from the \'src/\' directory')
  }
  if(isNPM && !isUnpkg){
    return "https://cdn.skypack.dev/" + url.slice(4)
  }
  if(isUnpkg && !isNPM){
    return "https://unpkg.com/" + url.slice(6)
  }
  return url
}
if(href && !list) {
  styleList.push({
    href,
    media,
    preload,
    alternative,
    cors,
    title
  })
}
if(list && !href){
  styleList = list
}
if(list && href){
  return handelError('Sorry you cannot have both props.href && props.list together')
}

---

  {
    styleList &&
      styleList.map(async ({href:path,media,preload,title,alternative,cors})=>(
        <>
          <link 
            href  = { formatHref(path) }
            rel={
              preload 
              ? "preload"
              : alternative 
              ? "alternative stylesheet"
              : "stylesheet"
            }
            media = { media ?? null }
            title = { title && alternative ? title : null }
            as    = { preload && "style" }
            type  = "text/css"
            crossorigin = {cors ?? null}
          />
        </>
      ))
  }