---
function handelError(err){
    throw new ReferenceError(`‚ùó There is an Error with the <Stylesheet> component: \n${err}`)
}
interface list{
  href?:string,
  media?:string,
  preload?:boolean,
  async?:boolean,
  title?:string,
  alternative?:boolean,
  cors?: 'anonymous' | 'use-credentials'
}
interface Props extends list{
  href?:string,
  local?:string,
  media?:string,
  list?:list[],
}

let {href,media, preload, async, title, alternative, cors, list} = Astro.props as Props

let styleList = []

const formatHref = (url:string):string|URL => {
  const checkIfRelative = url.includes('./') || url.includes('../')
  const isNPM = url.startsWith('npm:') && url.endsWith('.css')
  const isUnpkg = url.startsWith('unpkg:') && url.endsWith('.css')
  if(checkIfRelative){
     handelError(`In order to link to a stylesheet relative to the 'src/'\nYou need to statically import the stylesheet like so:\n import stylesHref from '${url}?url'\nThen apply 'stylesHref' as the value for 'href={stylesHref}'\nThis would allow the <Stylesheet/> component to obtain the right reference to the stylesheet `)
  }
  if(isNPM && !isUnpkg){
    cors = 'anonymous'
    return "https://cdn.skypack.dev/" + url.slice(4)
  }
  if(isUnpkg && !isNPM){
    cors = 'anonymous'
    return "https://unpkg.com/" + url.slice(6)
  }
  return url
}
if(href && !list) {
  styleList.push({
    href,
    media,
    preload: async ? false : preload,
    async,
    alternative,
    cors,
    title
  })
}
if(list && !href){
  styleList = list
}
if(list && href){
  handelError('Sorry you cannot have both props.href && props.list together')
}

---
  {
    styleList &&
      styleList.map(({
        href:path,
        media,
        preload,
        async,
        title,
        alternative,
        cors
      })=>(
          <link 
            href ={ formatHref(path) }
            rel ={
              preload 
              ? "preload"
              : alternative 
              ? "alternative stylesheet"
              : "stylesheet"
            }
            media = { async ? 'print' : media ?? null }
            onload = { async ? 'this.media="all"' : null }
            title = { title && alternative ? title : null }
            as    = { preload && "style" }
            type  = "text/css"
            crossorigin = {cors ?? null}
          />
      ))
  }