---
import { Fragment } from 'astro/internal'
import {createRequire} from 'node:module'

const require = createRequire(import.meta.url)
const {transformWithEsbuild} = require('vite')

const {
	'@is': tag = null,
	...attrs
} = Astro.props

/** Generates the HTML Tag for the Element */
const XElement: string = tag == null || /^(#text|fragment)$/i.test(tag) ? Fragment : tag
const XID = `${tag}-${Math.random().toString(32).substring(8)}`
/** Formats the given value so that it can be placed into an attribute. */
const toAttributeString = (value: any) => String(value).replace(/\b__vite_ssr_dynamic_import__\b/, 'import').replace(/\b__vite_ssr_import_0__\.default\b/, 'fetch')

/** Listeners to attach onto the event. */
let listenerString: string = ''

/** Event fired once before the document is displayed, deferred using `type="module". */
let listenerOfOnce: string = ''

let importString: string = ''

let propsString: string = ''

/** Parse the Attributes */
for (const name in attrs) {
	if (name.startsWith('@')) {
		const data = attrs[name]

		if (typeof data === 'function') {
			delete attrs[name]

			/** Normalized type of the event. */
			let type = name.slice(1)

			/** Options extracted from the type. */
			let opts: { [key: string]: boolean } = {}

			/** Values extracted from the type to populate Options. */
			let read: RegExpExecArray

			while ((read = /:\w+$/.exec(type))) {
				opts[type.slice(read.index + 1)] = true

				type = type.slice(0, read.index)
			}

			/** Apply the JS payload delivery*/
			switch (type) {
				case 'do':
					listenerOfOnce = `(${toAttributeString(data)})($,$$);`
					break

				case 'resize':
					listenerString += `new ResizeObserver((e,o)=>${
						opts.once
							? `!o.disconnect()&&`
						: ``
					}(${toAttributeString(data)})(e[0],$$)).observe($);`
					break

				case 'observe':
					listenerString += `new MutationObserver((e,o)=>${
						opts.once
							? `!o.disconnect()&&`
						: ``
					}(${toAttributeString(data)})(e[0])).observe($,${
						opts.attr ?
							`attributes:true`
						: opts.children ?
							`childList:true`
						: opts.sub ?
							`subtree:true`
						: opts.data ?
							`characterData:true`
						: `attributes:true,childList:true,subtree:true,characterData:true`
						});`
					break

				case 'visible':
					listenerString += `new IntersectionObserver((e,o)=>e[0].isIntersecting${
						opts.once
							? `&&!o.disconnect()`
						: ``
					}&&(${toAttributeString(data)})(e[0],$$)).observe($);`
					break
				
				default:
					// Add Event Listeners
					listenerString += `$.${
						opts.remove ?`removeEventListener` : `addEventListener`
					}(${
						JSON.stringify(type)
					},${
						`e=>{${
							opts.prevent ? `e.preventDefault();` : ''
						}(${
							toAttributeString(data)
						})(e,$$)}`
					}${
						opts.once
							? ',{once:true}'
						: opts.useCapture
							? `,{useCapture:true}`
						: ''
					});`
			}
		} else if (name.includes('@animate') && data && typeof data === 'object') {
			/** Applying Web Animate API to the Element */
			const [ keyFrames, options ] = [
				attrs['@animate'],
				attrs['@timings']
			]

			delete attrs['@animate']
			delete attrs['@timings']

			listenerString += `$.animate(${
				JSON.stringify(keyFrames)
			},${
				JSON.stringify({ ...options })
			});`
		} 
	}
	if (name.includes('define:vars')){
			const data = attrs['define:vars']
			if(typeof data === 'object'){
				propsString = `let ${
					Object.entries(Object(data)).map(
						([ name, value ]) => `${name.replace(/[^\w]/g, '')}=${JSON.stringify(value)}`
					).join(',')
				};`
			}
			delete attrs['define:vars']
		}
}




const TestLoadString: string =  `(async function($$,$){$=this;$$=(await import($$.src)).default;${
            propsString ?? ``
        }${
            listenerString ?? ``
        }${
            listenerOfOnce ?? ``
        }}).call(this.previousSibling,this.remove()||this)`



const memoizedTransformer = () =>{
	const cache = {}	
	return async(str,key)=>{
		console.log(str,key)
		const transformer = async (str)=> (await transformWithEsbuild(str,`Onload.ts`,{minify: true})).code 

		if(key in cache){
			console.log('Fetching from Console')
			return cache[key]
		}
		else{
			console.log('Transfroming String')
			let transformation = cache[key] = await transformer(str)
			return transformation
		}
	}
}
const getTransformations = memoizedTransformer()

const onLoadString: string = (
    listenerString || listenerOfOnce
        ? (await getTransformations(TestLoadString,XID))
    : null
)

/** Matching ShadowRoot attribute. */
let shadowRoot = Object.keys(attrs).find(name => /^shadowroot$/i.test(name))

if (shadowRoot) {
  /** Formatted ShadowRoot attribute value */
  let value = attrs[shadowRoot]

  // format the ShadowRoot attribute value
  value = typeof value === 'string' ? value : value ? 'open' : 'closed'

  // remove it from the attributes sent to the main element
  delete attrs[shadowRoot]

  // update the shadowRoot attribute value
  shadowRoot = value
}

const AstroFragment = Fragment as unknown as string
const HtmlTemplate = 'template'
---
<XElement {...attrs}>{
	shadowRoot
		? <HtmlTemplate {shadowRoot}><slot /></HtmlTemplate>
	: XElement === AstroFragment
		? <slot>&#8203;</slot>
	: <slot />
}</XElement>{
	onLoadString
		? <script type="module" src="data:text/javascript,export default {}" onload={
			onLoadString
		} />
	: null
}