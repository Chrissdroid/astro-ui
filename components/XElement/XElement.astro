---
import { Fragment } from 'astro/internal'

const {
	'@is': tag = null,
	...attrs
} = Astro.props

/** Generates the HTML Tag for the Element */
const XElement: string = tag == null || /^(#text|fragment)$/i.test(tag) ? Fragment : tag

/** Formats the given value so that it can be placed into an attribute. */
const toAttributeString = (value: any) => String(value).replace(/\b__vite_ssr_dynamic_import__\b/, 'import')

/** Listeners to attach onto the event. */
let listenerString: string = ''

/** Event fired once before the document is displayed, deferred using `type="module". */
let listenerOfOnce: string = ''

let importString: string = ''

let propsString: string = ''

/** Parse the Attributes */
for (const name in attrs) {
	if (name.startsWith('@')) {
		const data = attrs[name]

		if (typeof data === 'function') {
			delete attrs[name]

			/** Normalized type of the event. */
			let type = name.slice(1)

			/** Options extracted from the type. */
			let opts: { [key: string]: boolean } = {}

			/** Values extracted from the type to populate Options. */
			let read: RegExpExecArray

			while ((read = /:\w+$/.exec(type))) {
				opts[type.slice(read.index + 1)] = true

				type = type.slice(0, read.index)
			}

			/** Apply the JS payload delivery*/
			switch (type) {
				case 'do':
					listenerOfOnce = `(${toAttributeString(data)})($,$$);`
					break

				case 'resize':
					listenerString += `new ResizeObserver((e,o)=>${
						opts.once
							? `!o.disconnect()&&`
						: ``
					}(${toAttributeString(data)})(e[0],$$)).observe($);`
					break

				case 'observe':
					listenerString += `new MutationObserver((e,o)=>${
						opts.once
							? `!o.disconnect()&&`
						: ``
					}(${toAttributeString(data)})(e[0])).observe($,${
						opts.attr ?
							`attributes:true`
						: opts.children ?
							`childList:true`
						: opts.sub ?
							`subtree:true`
						: opts.data ?
							`characterData:true`
						: `attributes:true,childList:true,subtree:true,characterData:true`
						});`
					break

				case 'visible':
					listenerString += `new IntersectionObserver((e,o)=>e[0].isIntersecting${
						opts.once
							? `&&!o.disconnect()`
						: ``
					}&&(${toAttributeString(data)})(e[0],$$)).observe($);`
					break
				
				default:
					// Add Event Listeners
					listenerString += `$.${
						opts.remove ?`removeEventListener` : `addEventListener`
					}(${
						JSON.stringify(type)
					},${
						`e=>{${
							opts.prevent ? `e.preventDefault();` : ''
						}(${
							toAttributeString(data)
						})(e,$$)}`
					}${
						opts.once
							? ',{once:true}'
						: opts.useCapture
							? `,{useCapture:true}`
						: ''
					});`
			}
		} else if (name.includes('@animate') && data && typeof data === 'object') {
			/** Applying Web Animate API to the Element */
			const [ keyFrames, options ] = [
				attrs['@animate'],
				attrs['@timings']
			]

			delete attrs['@animate']
			delete attrs['@timings']

			listenerString += `$.animate(${
				JSON.stringify(keyFrames)
			},${
				JSON.stringify({ ...options })
			});`
		} else if (name.includes('@props') && data && typeof data === 'object') {
			const buffer = Object.entries(data)

			const propStatement = (key: string, value: any) => `prop_${
				key
			} = ${
				value && typeof value === 'object'
					? JSON.stringify(value)
				: toAttributeString(value)
			}`

			const propsStatements = (statements: any[]) => `const ${
				statements.map(
					prop => propStatement(prop[0], prop[1])
				)
			}`

			propsString = propsStatements(buffer)

			delete attrs['@props']
		}
	}
}

const onLoadString: string = (
	listenerString || listenerOfOnce
		? `(async function($$,$){$=this;$$=(await import($$.src)).default;${
			propsString ? `${propsString};` : ``
		}${
			listenerString ? `${listenerString};` : ``
		};${
			listenerOfOnce
		}}).call(this.previousSibling,this.remove()||this)`
	: `(async function($$,$){$=this,$$=(await import($$.src)).default}).call(this.previousSibling,this.remove()||this)`
)

/** Matching ShadowRoot attribute. */
let shadowRoot = Object.keys(attrs).find(name => /^shadowroot$/i.test(name))

if (shadowRoot) {
  /** Formatted ShadowRoot attribute value */
  let value = attrs[shadowRoot]

  // format the ShadowRoot attribute value
  value = typeof value === 'string' ? value : value ? 'open' : 'closed'

  // remove it from the attributes sent to the main element
  delete attrs[shadowRoot]

  // update the shadowRoot attribute value
  shadowRoot = value
}

const AstroFragment = Fragment as unknown as string
const HtmlTemplate = 'template'
---
<XElement {...attrs}>{
	shadowRoot
		? <HtmlTemplate {shadowRoot}><slot /></HtmlTemplate>
	: XElement === AstroFragment
		? <slot>&#8203;</slot>
	: <slot />
}</XElement>{
	onLoadString
		? <script type="module" src="data:text/javascript,export default {}" onload={
			onLoadString
		} />
	: null
}